Codility Sample Task:


Problem Statement:

Write a function:

    class Solution { public int solution(int[] A); }

that, given an array A of N integers, returns the smallest positive integer (greater than 0) that does not occur in A.

For example, given A = [1, 3, 6, 4, 1, 2], the function should return 5.

Given A = [1, 2, 3], the function should return 4.

Given A = [−1, −3], the function should return 1.

Write an efficient algorithm for the following assumptions:

        N is an integer within the range [1..100,000];
        each element of array A is an integer within the range [−1,000,000..1,000,000].



Code:


using System;
using System.Collections;
// you can also use other imports, for example:
 using System.Collections.Generic;

// you can write to stdout for debugging purposes, e.g.
// Console.WriteLine("this is a debug message");

class Solution {
    public int solution(int[] A) {
        // write your code in C# 6.0 with .NET 4.5 (Mono)
        List<int> positiveList = new List<int>();
        int result = 0;
        foreach( int i in A)
        {
            if(i>0)
            {
                positiveList.Add(i);
            }
        }

        for(int j=1;j<positiveList.Count;j++)
        {
            if(!positiveList.Contains(j))
            {
                result = j;
                break;
            }

        }

        if(result == 0 && positiveList.Count==0)
        {
            result = 1;
        }
        else if(result==0 && positiveList.Count !=0)
        {
            int temp = positiveList[positiveList.Count -1];
            result = temp+1;
       // positiveList
        }
        return result;
    }
}
